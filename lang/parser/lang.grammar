%package "lang.parser";
%import "lang.ast.*";

%class "LangParser";

%terminals  DATA, IF, ELSE, ITERATE, READ, PRINT, RETURN, NEW, TRUE, FALSE, NULL,
            INT, FLOAT, CHAR, BOOL,
            ID, TYPE, INTEGER, FLOATVAR, CHARACTER,
            OPENPARENTHESIS, CLOSEPARENTHESIS, OPENKEYS, CLOSEKEYS, OPENBRACKETS, CLOSEBRACKETS,
            ATRIBUITION, GREATER, SMALLER, EQUAL, DIFFERENT, PLUS, MINUS, MULTI, DIVIDE, INTDIVIDE,
            AND, DOT, DOTDOT, DOUBLEDOTDOT, COMMA, SEMI, NEGATION;

%left CLOSEBRACKETS, DOT, CLOSEPARENTHESIS;
%right NEGATION, UNARY_MINUS;
%left MULTI, DIVIDE, INTDIVIDE;
%left PLUS, MINUS;
%left GREATER, SMALLER;
%left EQUAL, DIFFERENT;
%left AND;
%left ELSE;

%typeof ID               =    "String";
%typeof TYPE             =    "String";
%typeof INTEGER          =    "Integer";
%typeof FLOATVAR         =    "Float";
%typeof CHARACTER        =    "String";

%typeof Prog             =    "NodeList";
%typeof Def              =    "Node";
%typeof Data             =    "Node";
%typeof Fun              =    "Node";
%typeof Decl             =    "Param";
%typeof Type             =    "Node";
%typeof Cmd              =    "Node";
%typeof Param            =    "Param";
%typeof ReturnType       =    "Node";
%typeof Literal          =    "Node";
%typeof Expr             =    "Expr";
%typeof Value            =    "Node";

%typeof DefList          =    "NodeList";
%typeof DeclList         =    "ParamList";
%typeof ParamsList       =    "ParamList";
%typeof ReturnList       =    "Node";
%typeof ValueList        =    "Node";
%typeof ExprList         =    "Expr";
%typeof CmdList          =    "Node";
%typeof ReturnRecurrency =    "Node";
%typeof ValueListRecurrency = "Node";

%typeof ParamsOpt        =    "Node";
%typeof ReturnOpt        =    "Node";
%typeof ExprListOpt      =    "Node";
%typeof ValueListOpt     =    "Node";
%typeof ExprOpt          =    "Expr";
%typeof ElseCmd          =    "Node";

%goal Prog;

Prog = DefList.l                                                                                              {: return l; :}
     ;

DefList = Def.d DefList.l                                                                                     {: return new NodeList(d, l); :}
        | Def.d                                                                                               {: return new NodeList(d); :}                      
        ;

Def = Data.d                                                                                                  {: return d; :}
    | Fun.f                                                                                                   {: return f; :}
    ;

Data = DATA TYPE.i OPENKEYS DeclList.l CLOSEKEYS                                                              {: return new Data(i, l); :} 
     ;

DeclList = Decl.d DeclList.l                                                                                  {: return new ParamList(d, l); :}
         | Decl.d                                                                                             {: return new ParamList(d); :}                        
         ;

Decl = ID.i DOUBLEDOTDOT Type.t SEMI                                                                          {: return new Param(i, t); :} 
     ;

Fun = ID.i OPENPARENTHESIS ParamsOpt.p CLOSEPARENTHESIS ReturnOpt.r Cmd.c                                     {: return new Function(i, p, r, c); :}
    ;     

ParamsOpt = ParamsList.l                                                                                      {: return l; :}
          |                                                                                                   {: return new Empty(); :}
          ;

ParamsList = Param.p                                                                                          {: return new ParamList(p); :}    
           | Param.p COMMA ParamsList.l                                                                       {: return new ParamList(p, l); :}     
           ;

Param = ID.i DOUBLEDOTDOT Type.t                                                                              {: return new Param(i, t); :}
      ;

ReturnOpt = ReturnType.r                                                                                      {: return r; :}
          |                                                                                                   {: return new Empty(); :}
          ;

ReturnType = DOTDOT Type.t                                                                                    {: return new NodeList(t); :}
           | DOTDOT Type.t COMMA ReturnRecurrency.r                                                           {: return new NodeList(t, r); :}
           ;

ReturnRecurrency = Type.t                                                                                     {: return new NodeList(t); :}
                 | Type.t COMMA ReturnRecurrency.r                                                            {: return new NodeList(t, r); :}
                 ;

Type = Type.t OPENBRACKETS CLOSEBRACKETS                                                                      {: return new Vector(); :}
     | Literal.l                                                                                              {: return l; :}
     ;

Literal = INT                                                                                                 {: return new IntType(); :}
        | CHAR                                                                                                {: return new CharType(); :}
        | BOOL                                                                                                {: return new BoolType(); :}
        | FLOAT                                                                                               {: return new FloatType(); :}
        | TYPE.i                                                                                              {: return new ID(i); :}
        ;

Cmd = OPENKEYS CmdList.l CLOSEKEYS                                                                            {: return l; :}
    | IF OPENPARENTHESIS Expr.e CLOSEPARENTHESIS Cmd.t ElseCmd.f                                              {: return new If(e, t, f); :}
    | ITERATE OPENPARENTHESIS Expr.e CLOSEPARENTHESIS Cmd.c                                                   {: return new Iterate(e, c); :}
    | READ Value.v SEMI                                                                                       {: return new Read(v); :}
    | PRINT Expr.e SEMI                                                                                       {: return new Print(e); :}
    | RETURN ReturnList.l SEMI                                                                                {: return l; :}
    | Value.v ATRIBUITION Expr.e SEMI                                                                         {: return new Atribuition(v, e); :}
    | ID.i OPENPARENTHESIS ExprListOpt.l CLOSEPARENTHESIS ValueListOpt.v SEMI                                 {: return new Call(i, l, v); :}
    ;

ElseCmd = ELSE Cmd.c                                                                                          {: return c; :}
        |                                                                                                     {: return new Empty(); :}
        ;

CmdList = Cmd.c CmdList.l                                                                                     {: return new NodeList(c, l); :}
        |                                                                                                     {: return new Empty(); :}
        ;

ReturnList = Expr.e                                                                                           {: return new Return(e); :}
           | Expr.e COMMA ReturnList.l                                                                        {: return new Return(e, l); :}
           ;

ValueListOpt = ValueList.l                                                                                    {: return l; :}
             |                                                                                                {: return new Empty(); :}
             ;

ValueList = SMALLER Value.v GREATER                                                                           {: return new NodeList(v); :}
          | SMALLER Value.v COMMA ValueListRecurrency.l GREATER                                               {: return new NodeList(v, l); :}
          ;

ValueListRecurrency = Value.v                                                                                 {: return new NodeList(v); :}
                    | Value.v COMMA ValueListRecurrency.l                                                     {: return new NodeList(v, l); :}
                    ;
          
Expr = Expr.e1 AND Expr.e2                                                                                    {: return new And(e1, e2); :}
     | Expr.e1 SMALLER Expr.e2                                                                                {: return new Smaller(e1, e2); :}
     | Expr.e1 GREATER Expr.e2                                                                                {: return new Greater(e1, e2); :}
     | Expr.e1 EQUAL Expr.e2                                                                                  {: return new Equal(e1, e2); :}
     | Expr.e1 DIFFERENT Expr.e2                                                                              {: return new Different(e1, e2); :}
     | Expr.e1 PLUS Expr.e2                                                                                   {: return new Addition(e1, e2); :}
     | Expr.e1 MINUS Expr.e2                                                                                  {: return new Subtraction(e1, e2); :}
     | Expr.e1 MULTI Expr.e2                                                                                  {: return new Multiplication(e1, e2); :}
     | Expr.e1 DIVIDE Expr.e2                                                                                 {: return new Division(e1, e2); :}
     | Expr.e1 INTDIVIDE Expr.e2                                                                              {: return new IntDivision(e1, e2); :}
     | NEGATION Expr.e                                                                                        {: return new Not(e); :}
     | MINUS Expr.e @ UNARY_MINUS                                                                             {: return new Negative(e); :}
     | TRUE                                                                                                   {: return new True(); :}
     | FALSE                                                                                                  {: return new False(); :}
     | NULL                                                                                                   {: return new Null(); :}
     | INTEGER.i                                                                                              {: return new IntegerVar(i); :}
     | FLOATVAR.f                                                                                             {: return new FloatVar(f); :}
     | CHARACTER.c                                                                                            {: return new CharacterVar(c); :}
     | Value.v                                                                                                {: return v; :}
     | OPENPARENTHESIS Expr.e CLOSEPARENTHESIS                                                                {: return e; :}
     | NEW Type.t ExprOpt.e                                                                                   {: return new Instance(t, e); :}
     | ID.i OPENPARENTHESIS ExprListOpt.l CLOSEPARENTHESIS OPENBRACKETS Expr.e CLOSEBRACKETS                  {: return new IndexedCall(i, l, e); :}
     ;

ExprOpt = OPENBRACKETS Expr.e CLOSEBRACKETS                                                                   {: return e; :}
        |                                                                                                     {: return new Empty(); :}
        ;

ExprListOpt = ExprList.l                                                                                      {: return l; :}
            |                                                                                                 {: return new Empty(); :}
            ;

ExprList = Expr.e                                                                                             {: return new ExprList(e); :}
         | Expr.e COMMA ExprList.l                                                                            {: return new ExprList(e, l); :}
         ;
         
Value = ID.i                                                                                                  {: return new ID(i); :}
      | Value.v OPENBRACKETS Expr.e CLOSEBRACKETS                                                             {: return new Array(v, e); :}
      | Value.v DOT ID.i                                                                                      {: return new Component(v, i); :}
      ;